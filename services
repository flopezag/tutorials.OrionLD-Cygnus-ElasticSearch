#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e
# set -x
echo

if (( $# != 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [help|create|start|stop]"
    exit 1
fi

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do
		sleep 1
	done
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrionLD\033[0m to be available"

	status=$(http -h http://localhost:1026/version 2>/dev/null | grep HTTP/ | awk '{print $2}')
	while (( status != 200 ))
	do
	  echo -e "Context Broker HTTP state: $status (waiting for 200)"
	  sleep 1
	  status=$(http -h http://localhost:1026/version 2>/dev/null | grep HTTP/ | awk '{print $2}')
	done

  echo -e " \033[1;32mdone\033[0m"
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*

  echo -e " \033[1;32mdone\033[0m"
}

addDatabaseIndex () {
	echo -e "\n⏳ Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrionLD\033[0m  ..."
	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1});
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1});
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	echo -e " \033[1;32mdone\033[0m"
}

startContainers () {
	echo ""
	docker-compose --log-level ERROR -f docker-compose/docker-compose.yml -p fiware up -d --remove-orphans

  echo -e  " \033[1;32mdone\033[0m"
}

stoppingContainers () {
	echo "Stopping containers"
	docker-compose --log-level ERROR -f docker-compose/docker-compose.yml -p fiware down -v --remove-orphans

  printf " \033[1;32mdone\033[0m\n"
}

command="$1"
case "${command}" in
	"help")
    echo "usage: services [help|create|start|stop]"
    ;;
  "start")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		echo -e "Starting five containers \033[1;34mOrionLD\033[0m, \033[1;34mCygnus\033[0m, \033[1;36ElacticSearch\033[0m, and a \033[1mMongoDB\033[0m."
		echo -e "- \033[1;34mOrionLD\033[0m is the context broker"
		echo -e "- \033[1;34mCygnus\033[0m is configured to write context data to ElasticSearch-DB only"
		echo ""
		startContainers
		waitForMongo
		addDatabaseIndex
		waitForOrion
		displayServices
		;;
	"stop")
		stoppingContainers
		;;
	"create")
		echo "Pulling Docker images"
		export $(cat .env | grep "#" -v)
		docker-compose --log-level ERROR -f docker-compose/docker-compose.yml -p fiware pull
		;;
	*)
		echo "Command not Found."
		echo "usage: services [help|create|start|stop]"
		exit 127;
		;;
esac
